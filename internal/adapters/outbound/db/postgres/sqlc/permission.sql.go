// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllPermissionsByRoleID = `-- name: GetAllPermissionsByRoleID :many
SELECT
    p.id, p.name
FROM role_permissions rp
JOIN permissions p ON p.id = rp.permission_id
WHERE rp.role_id = $1
`

type GetAllPermissionsByRoleIDRow struct {
	ID   int64       `json:"id"`
	Name pgtype.Text `json:"name"`
}

func (q *Queries) GetAllPermissionsByRoleID(ctx context.Context, roleID int64) ([]GetAllPermissionsByRoleIDRow, error) {
	rows, err := q.db.Query(ctx, getAllPermissionsByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPermissionsByRoleIDRow{}
	for rows.Next() {
		var i GetAllPermissionsByRoleIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
