// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package sqlc

import (
	"context"
)

const getRoleById = `-- name: GetRoleById :one
SELECT id, name from roles where id = $1
`

type GetRoleByIdRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRoleById(ctx context.Context, roleID int64) (GetRoleByIdRow, error) {
	row := q.db.QueryRow(ctx, getRoleById, roleID)
	var i GetRoleByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name from roles OFFSET $1 LIMIT $2
`

type GetRolesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type GetRolesRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRolesRow{}
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
